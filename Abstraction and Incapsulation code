#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <limits>
#include <cctype>

using namespace std;

const int MAX_EMPLOYEES = 50; 

class Employee {
protected:
    string id;
    string name;
    double salary;
public:
    Employee(const string &id, const string &name, double salary)
        : id(id), name(name), salary(salary) {}
    virtual ~Employee() {}
    virtual double calculateSalary() const = 0;
    virtual void display() const = 0;
    string getId() const { return id; }
};

bool isValidName(const string &name) {
    for (char ch : name) {
        if (!isalpha(ch) && ch != ' ') {
            return false;
        }
    }
    return !name.empty(); 
}
string getValidatedName() {
    string name;
    do {
        cout << "Enter Name: ";
        getline(cin, name);
        if (!isValidName(name)) {
            cout << "Invalid name! Please enter letters only ." << endl;
        }
    } while (!isValidName(name)); 

    return name;
}

class FullTimeEmployee : public Employee {
public:
    FullTimeEmployee(const string &id, const string &name, double salary)
        : Employee(id, name, salary) {}
    double calculateSalary() const override { return salary; }
    void display() const override {
        cout << endl << "Employee: " << name << " (ID: " << id << ")" << endl;
        cout << "Fixed Monthly Salary: $" << salary << endl;
    }
};

class PartTimeEmployee : public Employee {
    int hoursWorked;
public:
    PartTimeEmployee(const string &id, const string &name, double salary, int hoursWorked)
        : Employee(id, name, salary), hoursWorked(hoursWorked) {}
    double calculateSalary() const override { return salary * hoursWorked; }
    void display() const override {
        cout << endl << "Employee: " << name << " (ID: " << id << ")" << endl;
        cout << "Hourly Wage: $" << salary << endl;
        cout << "Hours Worked: " << hoursWorked << endl;
        cout << "Total Salary: $" << calculateSalary() << endl;
    }
};

class ContractualEmployee : public Employee {
    int projectsCompleted;
public:
    ContractualEmployee(const string &id, const string &name, double salary, int projectsCompleted)
        : Employee(id, name, salary), projectsCompleted(projectsCompleted) {}
    double calculateSalary() const override { return salary * projectsCompleted; }
    void display() const override {
        cout << endl << "Employee: " << name << " (ID: " << id << ")" << endl;
        cout << "Contract Payment Per Project: $" << salary << endl;
        cout << "Projects Completed: " << projectsCompleted << endl;
        cout << "Total Salary: $" << calculateSalary() << endl;
    }
};

void displayMenu() {
    cout << endl;
    cout << "Menu" << endl;
    cout << "1 - Add Full-time Employee" << endl;
    cout << "2 - Add Part-time Employee" << endl;
    cout << "3 - Add Contractual Employee" << endl;
    cout << "4 - Display Payroll Report" << endl;
    cout << "5 - Exit" << endl;
    cout << "Choose an option: ";
}


template<typename T>
T getValidatedInput(const string& prompt) {
    T value;
    bool validInput;
    do {
        cout << prompt;
        cin >> value;
        validInput = !cin.fail() && value >= 0;
        if (!validInput) {
            cout << "Invalid input! Please enter a positive number." << endl;
            cin.clear();
        }
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    } while (!validInput); 

    return value;
}

int main() {
    Employee* employees[MAX_EMPLOYEES]; 
    set<string> uniqueIds;
    int numEmployees = 0; 
    int choice;

    do {
        displayMenu();
        cin >> choice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        if (choice >= 1 && choice <= 3) {
            if (numEmployees >= MAX_EMPLOYEES) {
                cout << "Employee limit reached!" << endl;
                continue;
            }

            string id;
            double salary;

            cout << "Enter Employee ID: ";
            getline(cin, id);

            if (!uniqueIds.insert(id).second) {
                cout << "Duplicate ID! Try again." << endl;
                continue;
            }

            string name = getValidatedName(); 

            salary = getValidatedInput<double>("Enter Salary: ");

            if (choice == 1) {
                employees[numEmployees++] = new FullTimeEmployee(id, name, salary);
            } else if (choice == 2) {
                int hours = getValidatedInput<int>("Enter Hours Worked: ");
                employees[numEmployees++] = new PartTimeEmployee(id, name, salary, hours);
            } else {
                int projects = getValidatedInput<int>("Enter Projects Completed: ");
                employees[numEmployees++] = new ContractualEmployee(id, name, salary, projects);
            }
        } else if (choice == 4) {
            if (numEmployees == 0) {
                cout << "No employees added yet." << endl;
            } else {
                cout << endl << "------ Employee Payroll Report ------" << endl;
                for (int i = 0; i < numEmployees; i++) {
                    employees[i]->display();
                    cout << endl;
                }
            }
        }
    } while (choice != 5);

    
    for (int i = 0; i < numEmployees; i++) {
        delete employees[i];
    }

    cout << "Exiting program!" << endl;
    return 0;
}
